version: "3.9"

services:
  vault-leader:
    build:
      context: ./infra/vault-cluster/vault-leader
    restart: always
    container_name: vault-leader
    depends_on:
      vault-follower:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8200:8200"
    env_file:
      - ./infra/vault-cluster/.env
    cap_add:
      - IPC_LOCK
    volumes:
      - ${PWD}/infra/vault-cluster/certs:/vault/certs
      - vault_data2:/vault/data

  vault-follower:
    build:
      context: ./infra/vault-cluster/vault-follower
    restart: always
    container_name: vault-follower
    ports:
      - "8100:8100"
    env_file:
      - ./infra/vault-cluster/.env
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - vault_data1:/vault/data
      - ${PWD}/infra/vault-cluster/certs:/vault/certs

  postgres:
    image: postgres:latest
    restart: on-failure
    container_name: postgres
    ports:
      - 5432:5432
    env_file:
      - ./infra/postgres/.env
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d handouceur'"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - ${PWD}/infra/postgres/init:/docker-entrypoint-initdb.d:ro
      - ${PWD}/infra/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ${PWD}/infra/postgres/certs/:/var/lib/postgresql/certs/:ro

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: pgadmin4
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 5555:80
    env_file:
      - ./infra/postgres/.env

volumes:
  vault_data1:
  vault_data2:
