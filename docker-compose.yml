services:
  api:
    develop:
      watch:
        - action: sync+restart
          path: ./app/api
          target: app
        - action: rebuild
          path: ./app/api/package.json
    build:
      context: .
      dockerfile: dockerfiles/api.dockerfile
      target: dev
    container_name: api
    restart: unless-stopped
    ports:
      - 3000:3000
    env_file:
      - ./app/api/.docker.env
    volumes:
      - ${PWD}/app/api:/app # mount the local folder to let watch know when a file has been modified
      - /app/node_modules

  nginx:
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    restart: unless-stopped
    container_name: nginx
    ports:
      - "443:443"
    depends_on:
      - vault
      - vault-slave
      - vault-slave1
    volumes:
      - ${PWD}/infra/vault-cluster/certs/server-cert.pem:/etc/ssl/certs/server-cert.pem
      - ${PWD}/infra/vault-cluster/certs/server-key.pem:/etc/ssl/private/server-key.pem

  vault:
    build:
      context: .
      dockerfile: ./dockerfiles/vault.dockerfile
      target: vault
    restart: unless-stopped
    container_name: vault
    depends_on:
      - postgres
    ports:
      - "8200:8200"
    env_file:
      - ./infra/vault-cluster/.env
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ${PWD}/infra/vault-cluster/certs:/vault/certs:ro
      - /vault/data

  vault-slave:
    build:
      context: .
      dockerfile: ./dockerfiles/vault.dockerfile
      target: slave1
    restart: unless-stopped
    container_name: vault-slave
    env_file:
      - ./infra/vault-cluster/.env
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ${PWD}/infra/vault-cluster/certs:/vault/certs:ro
      - /vault/data

  vault-slave1:
    build:
      context: .
      dockerfile: ./dockerfiles/vault.dockerfile
      target: slave2
    restart: unless-stopped
    container_name: vault-slave1
    env_file:
      - ./infra/vault-cluster/.env
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ${PWD}/infra/vault-cluster/certs:/vault/certs:ro
      - /vault/data

  # vault transit autounseal token must be use by other vaults
  vault-transit:
    build:
      context: .
      dockerfile: ./dockerfiles/vault.dockerfile
      target: transit
    restart: unless-stopped
    container_name: vault-transit
    env_file:
      - ./infra/vault-cluster/.env
    cap_add:
      - IPC_LOCK
    volumes:
      - ${PWD}/infra/vault-cluster/certs:/vault/certs:ro
      - /vault/data

  postgres:
    build:
      context: .
      dockerfile: dockerfiles/postgres.dockerfile
    restart: on-failure
    container_name: postgres
    ports:
      - 5432:5432
    env_file:
      - ./infra/postgres/.env
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d handouceur'"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - ${PWD}/infra/postgres/certs/:/var/lib/postgresql/certs/:ro

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    container_name: pgadmin4
    ports:
      - 5555:80
    env_file:
      - ./infra/postgres/.env
